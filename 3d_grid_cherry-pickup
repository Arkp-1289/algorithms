class Solution {
public:
    int check(int i,int j1,int j2,int row,int col,vector<vector<int>>& grid,vector<vector<vector<int>>>& dp){
       if (j1<0 || j2<0 || j1>=col || j2>=col){return -1e8;}

       if (i==row-1){
           if (j1==j2){return grid[i][j1];}
           else{return grid[i][j1]+grid[i][j2];}

       }
       if (dp[i][j1][j2]!=-1){return dp[i][j1][j2];}
        int res=INT_MIN;
       for (int k1=-1;k1<=1;k1++){
           for (int k2=-1;k2<=1;k2++){
               if (j1==j2){
                   res=max(res,grid[i][j1]+check(i+1,j1+k1,j2+k2,row,col,grid,dp));
               } else{
                    res=max(res,grid[i][j1]+grid[i][j2]+check(i+1,j1+k1,j2+k2,row,col,grid,dp));
               }
               
           }
       }
       dp[i][j1][j2]=res;
       return dp[i][j1][j2];





    }


    int cherryPickup(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<vector<int>>>dp(row,vector<vector<int>>(col,vector<int>(col,-1)));
        return check(0,0,col-1,row,col,grid,dp);


    }
};
